strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
library(readxl)
library(rio)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
library(htmlwidgets)
library(sunburstR)
library(treemap)
library(stringr)
library(grid)
library(gridExtra)
oncat.data %>%
select(-Innovation,-`Type of Knowledge`) %>%
mutate_each(funs(as.numeric),-school,-type) %>%
mutate(Novelty = NA) %>%
gather(
variable,value,-school,-type,-Application,-`Cognitive process`
) %>%
rename(Process = `Cognitive process`) %>%
filter(!is.na(value)) %>%
arrange(value, variable, Process, Application) %>%
ggplot(aes(x = Application, y = Process)) +
geom_point(
aes(fill = factor(value)), size = 10, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
#facet_grid(type~variable, drop = FALSE) +
facet_grid(variable~type, drop = FALSE) +
xlab("\nTransfer") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Have Mathematical Knowledge","Apply in the Specific Engineering Context","Apply in Other Engineering Contexts","Apply to Real-World Predictable Situations","Apply to Real-World Unpredictable Situations"
), 15), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 20) +
theme(axis.text.x = element_text(angle = 0),
strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
library(readxl)
library(rio)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
library(htmlwidgets)
library(sunburstR)
library(treemap)
library(stringr)
library(grid)
library(gridExtra)
read.files <- function(sheet)
{
read_excel(data.file, sheet) %>%
set_colnames(., tolower(names(.))) %>%
mutate(school = sheet)
}
type_knowledge <- c("Factual",
"Conceptual",
"Computational",
"Math translation",
"Investigative")
cognitive_process <- c("Remember",
"Understand",
"Apply",
"Analyze",
"Evaluate",
"Create")
transfer <- c(
"Mathematical knowledge",
"Apply in a disciplinary context",
"Apply in other engineering contexts",
"Apply to real-world predictable contexts",
"Apply to real-world unpredictable contexts"
)
depth_knowledge <- c(
"Solved by standardized ways",
"Solved by well-proven analyitcal techniques",
"Originiality in analysis, no obvious soltions"
)
interdependence <- c(
"Discrete components",
"Parts of systems within complex engineering problems",
"High level problems including many component parts or sub-problems"
)
novelty <- c(
"Familiar problems",
"Reorganized problems",
"New problems"
)
data.dir <- "~/ownCloud/Projects/R/Projects/ONCAT/data/"
data.file <- paste0(data.dir,"Calculus Outcomes.xlsx")
sheets <- excel_sheets(data.file)
oncat.data <- lapply(sheets, read.files) %>%
set_names(., sheets) %>%
bind_rows() %>%
mutate(type = ifelse(grepl("Seneca|Mohawk",school),"College","University")) %>%
separate(school,c("school","course"), sep = " ")
oncat.data$`cognitive process` %<>%
factor(c(1:6), cognitive_process)
oncat.data$`type of knowledge` %<>%
factor(c(1:5), type_knowledge)
oncat.data$transfer %<>%
factor(c(1:5), transfer)
oncat.data$`depth of knowledge` %<>%
factor(c(1:3), depth_knowledge)
oncat.data$interdependence %<>%
factor(c(1:3), interdependence)
oncat.data$novelty %<>%
factor(c(1:3), novelty)
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
ggplot(aes(x = transfer, y = `cognitive process`)) +
geom_point(
aes(fill = factor(value)), size = 10, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
facet_grid(type~variable, drop = FALSE) +
xlab("\nTransfer") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Have Mathematical Knowledge","Apply in the Specific Engineering Context","Apply in Other Engineering Contexts","Apply to Real-World Predictable Situations","Apply to Real-World Unpredictable Situations"
), 15), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 20) +
theme(axis.text.x = element_text(angle = 0),
strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
ggplot(aes(x = transfer, y = `cognitive process`)) +
geom_point(
aes(fill = factor(value)), size = 10, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
facet_grid(type~variable, drop = FALSE) +
xlab("\nTransfer") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Have Mathematical Knowledge","Apply in the Specific Engineering Context","Apply in Other Engineering Contexts","Apply to Real-World Predictable Situations","Apply to Real-World Unpredictable Situations"
), 15), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 20) +
theme(axis.text.x = element_text(angle = 0),
strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
ggsave("3x Framework 1.png", width = 26, height = 10, dpi = 300)
library(readxl)
library(rio)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
library(htmlwidgets)
library(sunburstR)
library(treemap)
library(stringr)
library(grid)
library(gridExtra)
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
ggplot(aes(x = transfer, y = `cognitive process`)) +
geom_point(
aes(fill = factor(value)), size = 10, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
facet_grid(type~variable, drop = FALSE) +
xlab("\nTransfer") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Have Mathematical Knowledge","Apply in the Specific Engineering Context","Apply in Other Engineering Contexts","Apply to Real-World Predictable Situations","Apply to Real-World Unpredictable Situations"
), 15), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 20) +
theme(axis.text.x = element_text(angle = 0),
strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
select(-`type of knowledge`) %>%
ggplot(aes(x = transfer, y = `cognitive process`)) +
geom_point(
aes(fill = factor(value)), size = 10, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
facet_grid(type~variable, drop = FALSE) +
xlab("\nTransfer") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Have Mathematical Knowledge","Apply in the Specific Engineering Context","Apply in Other Engineering Contexts","Apply to Real-World Predictable Situations","Apply to Real-World Unpredictable Situations"
), 15), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 20) +
theme(axis.text.x = element_text(angle = 0),
strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer)
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
filter(type!="type of knowledge") %>%
ggplot(aes(x = transfer, y = `cognitive process`)) +
geom_point(
aes(fill = factor(value)), size = 10, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
facet_grid(type~variable, drop = FALSE) +
xlab("\nTransfer") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Have Mathematical Knowledge","Apply in the Specific Engineering Context","Apply in Other Engineering Contexts","Apply to Real-World Predictable Situations","Apply to Real-World Unpredictable Situations"
), 15), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 20) +
theme(axis.text.x = element_text(angle = 0),
strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
filter(type!="type of knowledge")
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
filter(type!="type of knowledge")
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
filter(type!="type of knowledge") %>%
ggplot(aes(x = transfer, y = `cognitive process`)) +
geom_point(
aes(fill = factor(value)), size = 10, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
facet_grid(type~variable, drop = FALSE) +
xlab("\nTransfer") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Have Mathematical Knowledge","Apply in the Specific Engineering Context","Apply in Other Engineering Contexts","Apply to Real-World Predictable Situations","Apply to Real-World Unpredictable Situations"
), 15), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 20) +
theme(axis.text.x = element_text(angle = 0),
strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
filter(type!=`type of knowledge`) %>%
ggplot(aes(x = transfer, y = `cognitive process`)) +
geom_point(
aes(fill = factor(value)), size = 10, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
facet_grid(type~variable, drop = FALSE) +
xlab("\nTransfer") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Have Mathematical Knowledge","Apply in the Specific Engineering Context","Apply in Other Engineering Contexts","Apply to Real-World Predictable Situations","Apply to Real-World Unpredictable Situations"
), 15), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 20) +
theme(axis.text.x = element_text(angle = 0),
strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
View(oncat.data)
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`, -`type of knowledge`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
ggplot(aes(x = transfer, y = `cognitive process`)) +
geom_point(
aes(fill = factor(value)), size = 10, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
facet_grid(type~variable, drop = FALSE) +
xlab("\nTransfer") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Have Mathematical Knowledge","Apply in the Specific Engineering Context","Apply in Other Engineering Contexts","Apply to Real-World Predictable Situations","Apply to Real-World Unpredictable Situations"
), 15), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 20) +
theme(axis.text.x = element_text(angle = 0),
strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`, -`type of knowledge`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
ggplot(aes(x = transfer, y = `cognitive process`)) +
geom_point(
aes(fill = factor(value)), size = 10, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
facet_grid(type~variable, drop = FALSE) +
xlab("\nTransfer") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Have Mathematical Knowledge","Apply in the Specific Engineering Context","Apply in Other Engineering Contexts","Apply to Real-World Predictable Situations","Apply to Real-World Unpredictable Situations"
), 15), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 20) +
theme(axis.text.x = element_text(angle = 0),
strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
library(readxl)
library(rio)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
library(htmlwidgets)
library(sunburstR)
library(treemap)
library(stringr)
library(grid)
library(gridExtra)
oncat.data %>%
mutate_each(funs(as.numeric),-school, -type, -course) %>%
gather(
variable, value, -school, -type, -course, -transfer,-`cognitive process`, -`type of knowledge`
) %>%
filter(!is.na(value)) %>%
arrange(value, variable, `cognitive process`, transfer) %>%
ggplot(aes(x = transfer, y = `cognitive process`)) +
geom_point(
aes(fill = factor(value)), size = 10, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
facet_grid(type~variable, drop = FALSE) +
xlab("\nTransfer") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Have Mathematical Knowledge","Apply in the Specific Engineering Context","Apply in Other Engineering Contexts","Apply to Real-World Predictable Situations","Apply to Real-World Unpredictable Situations"
), 15), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 20) +
theme(axis.text.x = element_text(angle = 0),
strip.text.y = element_text(angle = 0),
panel.border = element_rect(fill = NA, color = "grey50"),
legend.position = "bottom")
oncat.data %>%
group_by(school, type, `Type of Knowledge`) %>%
mutate_each(funs(as.numeric),-school,-type,-`Type of Knowledge`) %>%
#summarize_each(funs(mean), -school, -type, -`Type of Knowledge`) %>%
gather(
variable,value,-school,-type,-Application,-`Cognitive process`,-`Type of Knowledge`
) %>%
arrange(value, variable, `Cognitive process`, Application, `Type of Knowledge`) %>%
rename(Knowledge = `Type of Knowledge`,
Process = `Cognitive process`) %>%
ggplot(aes(x = Application, y = Process)) +
geom_point(
aes(fill = factor(value)), size = 6, pch = 21, show.legend = TRUE, position =
position_jitter()
) +
annotate("segment", x = Inf, xend = -Inf, y = Inf, yend = Inf, colour = "grey50", lwd = 0.5) +
facet_grid(Knowledge~type+variable) +
xlab("\nApplication") +
ylab("Cognitive Process\n") +
scale_y_discrete(labels =
c(
"Remember","Understand","Apply","Analyze","Evaluate","Create"
), limits = c(1:6)) +
scale_x_discrete(labels =
str_wrap(c(
"Disciplinary Knowledge","Disciplinary Application","Cross-disciplinary Application","Real-world predictable application","Real-world Unpredictable Application"
), 20), limits = c(1:5)) +
guides(fill = guide_legend(title = "Scale Level")) +
# scale_colour_continuous(range=c(10,30), limits=c(1,3), breaks=c(1,2,3)) +
scale_fill_brewer(type = "seq", palette = "YlOrRd") +
theme_tufte(base_size = 16) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.5),
strip.text.y = element_text(angle = 0),
legend.position = "bottom")
library(beeswarm)
